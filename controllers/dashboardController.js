const User = require(\'../models/User\');\nconst Opportunity = require(\'../models/Opportunity\');\n\n// @desc    Show user dashboard with stats, achievements, and relevant opportunities\n// @route   GET /dashboard\nexports.showDashboard = async (req, res, next) => {\n  try {\n    // Fetch user data, populating achievements\n    const user = await User.findById(req.user._id)\n      .populate(\'achievements.achievement\') // Populate if achievements are refs\n      .lean(); \n\n    if (!user) {\n      req.logout(); // Log out if user not found\n      return res.redirect(\'/\');\n    }\n\n    // Fetch relevant opportunities\n    let opportunitiesQuery;\n    if (user.role === \'organization\') {\n      // Organization: Show opportunities they created\n      opportunitiesQuery = Opportunity.find({ createdBy: user._id });\n    } else {\n      // Volunteer: Show opportunities they are attending\n      opportunitiesQuery = Opportunity.find({ attendees: user._id });\n    }\n    const opportunities = await opportunitiesQuery.sort({ dateTime: \'asc\' }).lean();\n\n    // Calculate rank info using the helper (ensure helper is accessible or logic is here)\n    // Assuming hbs helper logic is moved or accessible via req.app.locals.hbs.helpers\n    const rankInfo = req.app.locals.hbs.helpers.calculateRank(user.points);\n\n    // Prepare category progress data\n    const categories = [\n      { id: \'healthcare\', name: \'Healer\' },\n      { id: \'education\', name: \'Knowledge Sage\' },\n      { id: \'environment\', name: \'Nature Guardian\' },\n      { id: \'community\', name: \'Unity Weaver\' },\n      { id: \'animals\', name: \'Beast Whisperer\' },\n      { id: \'other\', name: \'Mystery Seeker\' }\n    ];\n\n    let categoryProgressData = categories.map(category => { // Renamed temporary variable\n      const points = user.categoryPoints ? (user.categoryPoints[category.id] || 0) : 0;\n      return {\n        id: category.id,\n        points: points,\n        level: Math.floor(points / 50) + 1,\n        percentage: Math.min(((points % 50) / 50) * 100, 100)\n      };\n    });\n\n    // Sort by points descending and take top 4\n    categoryProgressData.sort((a, b) => b.points - a.points); // Sort highest points first\n    const topCategoryProgress = categoryProgressData.slice(0, 4); // Get the top 4\n\n    // Prepare earned achievements data\n    const earnedAchievements = user.achievements ? user.achievements.map(a => ({\n        id: a.achievement.id, // Assuming populated\n        name: a.achievement.name, // Assuming populated\n        icon: a.achievement.icon, // Assuming populated\n        earnedAt: a.earnedAt\n    })) : [];\n\n    // Prepare next/potential achievements data (logic simplified, expand as needed)\n    const potentialAchievementsConfig = require(\'../config/ranks\').achievements; // Load config\n    const earnedAchievementIds = new Set(earnedAchievements.map(a => a.id));\n    const nextAchievements = potentialAchievementsConfig\n      .filter(ach => !earnedAchievementIds.has(ach.id))\n      .map(ach => {\n        let progress = 0;\n        // Calculate progress based on achievement criteria\n        if (ach.id === \'hometown_hero\') progress = Math.min(Math.floor(((user.stats?.eventsAttended || 0) / 10) * 100), 99);\n        else if (ach.id === \'dedication\') progress = Math.min(Math.floor(((user.stats?.totalHours || 0) / 50) * 100), 99);\n        // Add more progress calculations here...\n        else progress = 0; // Default progress if calculation not defined\n        \n        return {\n            id: ach.id,\n            name: ach.name,\n            icon: ach.icon || null,\n            progress: progress\n        };\n      })\n      .slice(0, 4); // Limit displayed potential achievements\n\n    // Calculate overall level and XP for next level\n    const currentLevel = Math.floor((user.points || 0) / 100) + 1;\n    const nextLevelXP = currentLevel * 100;\n    const currentLevelXP = (currentLevel - 1) * 100;\n    const xpTowardsNextLevel = (user.points || 0) - currentLevelXP;\n    const xpNeededForNextLevel = nextLevelXP - currentLevelXP;\n    const levelProgressPercent = xpNeededForNextLevel > 0 ? Math.min(Math.round((xpTowardsNextLevel / xpNeededForNextLevel) * 100), 100) : 0;\n
    res.render(\'dashboard\', {\n      layout: \'main\', // Ensure layout is specified if not default\n      name: user.name,\n      role: user.role,\n      points: user.points || 0,\n      stats: {\n        eventsAttended: user.stats?.eventsAttended || 0,\n        totalHours: user.stats?.totalHours || 0,\n        currentStreak: user.stats?.currentStreak || 0,\n        categoriesCount: topCategoryProgress.length, // Count helped categories\n        level: currentLevel\n      },\n      rankTier: rankInfo.tier,\n      rankProgress: levelProgressPercent, // Use level progress for main bar\n      pointsToNextRank: nextLevelXP - (user.points || 0), // Points needed for *next level*\n      nextLevelXP: nextLevelXP,\n      opportunities, // Pass fetched opportunities\n      achievements: earnedAchievements, // Pass formatted earned achievements\n      categoryProgress: topCategoryProgress, // Pass the sorted and sliced array\n      nextAchievements // Pass potential next achievements\n    });\n\n  } catch (err) {\n    console.error(\'Error loading dashboard:\', err);\n    next(err); // Pass error to the central error handler\n  }\n};\n 