<div class="bg-white rounded-lg shadow-md p-6">
  <!-- Join prompt notification that appears when directed from signup link -->
  <div id="join-prompt" class="hidden bg-blue-100 text-blue-800 p-4 rounded mb-4">
    <div class="flex items-center justify-between">
      <div class="flex-1">
        <div class="flex items-center">
          <i class="fas fa-info-circle text-blue-500 mr-2 text-xl"></i>
          <p class="mb-3">Would you like to join this opportunity? Click the button below to confirm.</p>
        </div>
        <form id="join-form" action="/opportunities/{{opportunity._id}}/attend?_method=PUT" method="POST">
          <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded flex items-center">
            <i class="fas fa-user-plus mr-2"></i> Confirm Registration
          </button>
        </form>
      </div>
      <button onclick="closeJoinPrompt()" class="text-blue-500 hover:text-blue-700 ml-4">
        <i class="fas fa-times"></i>
      </button>
    </div>
  </div>
  
  <!-- Success notification that appears after successful registration -->
  <div id="success-notification" class="hidden bg-green-100 text-green-800 p-4 rounded mb-4">
    <div class="flex items-center justify-between">
      <div class="flex-1">
        <div class="flex items-center">
          <i class="fas fa-check-circle text-green-500 mr-2 text-xl"></i>
          <div>
            <p class="font-bold mb-1">Registration Successful!</p>
            <p id="success-message">You've successfully registered for this opportunity.</p>
            <p id="points-earned" class="mt-2"></p>
          </div>
        </div>
        <div id="achievements-container" class="mt-3 hidden">
          <p class="font-bold">Achievements Unlocked:</p>
          <div id="achievements-list" class="mt-2 flex flex-wrap gap-2"></div>
        </div>
      </div>
      <button onclick="closeSuccessNotification()" class="text-green-500 hover:text-green-700 ml-4">
        <i class="fas fa-times"></i>
      </button>
    </div>
  </div>
  
  <!-- Error notification that appears on errors -->
  <div id="error-notification" class="hidden bg-red-100 text-red-800 p-4 rounded mb-4">
    <div class="flex items-center justify-between">
      <div class="flex-1">
        <div class="flex items-center">
          <i class="fas fa-exclamation-circle text-red-500 mr-2 text-xl"></i>
          <p id="error-message">An error occurred.</p>
        </div>
      </div>
      <button onclick="closeErrorNotification()" class="text-red-500 hover:text-red-700 ml-4">
        <i class="fas fa-times"></i>
      </button>
    </div>
  </div>
  
  <div class="flex justify-between items-start">
    <h1 class="text-2xl font-bold text-gray-800 mb-2">{{opportunity.title}}</h1>
    
    {{#if user}}
      {{#if (eq user.id opportunity.createdBy._id)}}
        <div class="flex space-x-2">
          <a href="/opportunities/edit/{{opportunity._id}}" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm">
            Edit
          </a>
          <form action="/opportunities/{{opportunity._id}}?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this opportunity?');">
            <button type="submit" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">
              Delete
            </button>
          </form>
        </div>
      {{else}}
        {{#if (eq user.role "volunteer")}}
          {{#if isAttending}}
            <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">You're attending</span>
          {{else}}
            <form id="attend-form" action="/opportunities/{{opportunity._id}}/attend?_method=PUT" method="POST">
              <button type="submit" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded flex items-center">
                <i class="fas fa-user-plus mr-2"></i> Attend Event
              </button>
            </form>
          {{/if}}
        {{/if}}
      {{/if}}
    {{/if}}
  </div>
  
  <p class="text-gray-600 mb-6">
    Created by: {{opportunity.createdBy.name}}
  </p>
  
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
    <div class="bg-gray-50 p-4 rounded">
      <h3 class="font-semibold text-gray-700 mb-2">Date & Time</h3>
      <p>{{formatDate opportunity.dateTime "dddd, MMMM DD, YYYY"}}</p>
      <p>{{formatDate opportunity.dateTime "h:mm A"}}</p>
    </div>
    
    <div class="bg-gray-50 p-4 rounded">
      <h3 class="font-semibold text-gray-700 mb-2">Duration</h3>
      <p>{{opportunity.duration}} hours</p>
      <p class="text-sm text-gray-500">{{multiply opportunity.duration 10}} points</p>
    </div>
    
    <div class="bg-gray-50 p-4 rounded">
      <h3 class="font-semibold text-gray-700 mb-2">Category</h3>
      <span class="inline-block bg-green-100 text-green-800 px-3 py-1 rounded-full">
        {{opportunity.tag}}
      </span>
    </div>
  </div>
  
  <div class="mb-6">
    <h3 class="font-semibold text-gray-700 mb-2">Description</h3>
    <p class="text-gray-700 whitespace-pre-line">{{opportunity.description}}</p>
  </div>
  
  <div class="mb-6">
    <h3 class="font-semibold text-gray-700 mb-2">Location</h3>
    <p class="mb-2">{{opportunity.location.address}}</p>
    <div id="map" class="w-full h-64 rounded-lg border" data-lat="{{opportunity.location.coordinates.coordinates.[1]}}" data-lng="{{opportunity.location.coordinates.coordinates.[0]}}"></div>
  </div>
  
  {{#if opportunity.attendees.length}}
    <div>
      <h3 class="font-semibold text-gray-700 mb-2">Attendees</h3>
      <p>{{opportunity.attendees.length}} volunteer(s) attending</p>
    </div>
  {{/if}}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize map (actual implementation in opportunity.js)
    if (typeof showOpportunityMap === 'function') {
      const mapElement = document.getElementById('map');
      const lat = parseFloat(mapElement.dataset.lat);
      const lng = parseFloat(mapElement.dataset.lng);
      showOpportunityMap(lat, lng);
    }
    
    // Check for join parameter in URL and show join prompt if present
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('join') === 'true') {
      const joinPrompt = document.getElementById('join-prompt');
      if (joinPrompt) {
        joinPrompt.classList.remove('hidden');
        joinPrompt.scrollIntoView({ behavior: 'smooth' });
      }
    }
    
    // Set up AJAX form submission for the join form
    const joinForm = document.getElementById('join-form');
    if (joinForm) {
      joinForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formAction = this.getAttribute('action');
        const formMethod = this.getAttribute('method');
        
        fetch(formAction, {
          method: formMethod,
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          // First hide any open notifications
          closeJoinPrompt();
          closeSuccessNotification();
          closeErrorNotification();
          
          if (data.success) {
            // Update success notification with response data
            document.getElementById('success-message').textContent = data.message || 'Successfully registered for the opportunity!';
            
            if (data.pointsEarned) {
              document.getElementById('points-earned').textContent = `You earned ${data.pointsEarned} points!`;
            }
            
            // Handle achievements if any
            if (data.newAchievements && data.newAchievements.length > 0) {
              const achievementsContainer = document.getElementById('achievements-container');
              const achievementsList = document.getElementById('achievements-list');
              
              achievementsList.innerHTML = '';
              data.newAchievements.forEach(achievement => {
                const achievementEl = document.createElement('div');
                achievementEl.classList.add('bg-yellow-100', 'text-yellow-800', 'px-3', 'py-1', 'rounded-full', 'text-sm', 'flex', 'items-center');
                achievementEl.innerHTML = `
                  <i class="fas fa-trophy text-yellow-600 mr-1"></i>
                  ${achievement.name}
                `;
                achievementsList.appendChild(achievementEl);
              });
              
              achievementsContainer.classList.remove('hidden');
            }
            
            // Show the success notification
            document.getElementById('success-notification').classList.remove('hidden');
            
            // Update the UI to show the user is now attending
            updateAttendingUI();
            
            // Auto-hide the notification after 5 seconds
            setTimeout(closeSuccessNotification, 5000);
          } else {
            // Handle error
            document.getElementById('error-message').textContent = data.message || 'An error occurred during registration.';
            document.getElementById('error-notification').classList.remove('hidden');
            
            // If the error is "already attending", update the UI
            if (data.message && data.message.includes('already attending')) {
              updateAttendingUI();
            }
            
            // Auto-hide the notification after 5 seconds
            setTimeout(closeErrorNotification, 5000);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          document.getElementById('error-message').textContent = 'An error occurred during registration. Please try again.';
          document.getElementById('error-notification').classList.remove('hidden');
          
          // Auto-hide the notification after 5 seconds
          setTimeout(closeErrorNotification, 5000);
        });
      });
    }
    
    // Set up the same AJAX submission for the main attend form
    const attendForm = document.getElementById('attend-form');
    if (attendForm) {
      attendForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formAction = this.getAttribute('action');
        const formMethod = this.getAttribute('method');
        
        fetch(formAction, {
          method: formMethod,
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          // First hide any open notifications
          closeSuccessNotification();
          closeErrorNotification();
          
          if (data.success) {
            // Update success notification with response data
            document.getElementById('success-message').textContent = data.message || 'Successfully registered for the opportunity!';
            
            if (data.pointsEarned) {
              document.getElementById('points-earned').textContent = `You earned ${data.pointsEarned} points!`;
            }
            
            // Handle achievements if any
            if (data.newAchievements && data.newAchievements.length > 0) {
              const achievementsContainer = document.getElementById('achievements-container');
              const achievementsList = document.getElementById('achievements-list');
              
              achievementsList.innerHTML = '';
              data.newAchievements.forEach(achievement => {
                const achievementEl = document.createElement('div');
                achievementEl.classList.add('bg-yellow-100', 'text-yellow-800', 'px-3', 'py-1', 'rounded-full', 'text-sm', 'flex', 'items-center');
                achievementEl.innerHTML = `
                  <i class="fas fa-trophy text-yellow-600 mr-1"></i>
                  ${achievement.name}
                `;
                achievementsList.appendChild(achievementEl);
              });
              
              achievementsContainer.classList.remove('hidden');
            }
            
            // Show the success notification
            document.getElementById('success-notification').classList.remove('hidden');
            
            // Update the UI to show the user is now attending
            updateAttendingUI();
            
            // Auto-hide the notification after 5 seconds
            setTimeout(closeSuccessNotification, 5000);
          } else {
            // Handle error
            document.getElementById('error-message').textContent = data.message || 'An error occurred during registration.';
            document.getElementById('error-notification').classList.remove('hidden');
            
            // If the error is "already attending", update the UI
            if (data.message && data.message.includes('already attending')) {
              updateAttendingUI();
            }
            
            // Auto-hide the notification after 5 seconds
            setTimeout(closeErrorNotification, 5000);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          document.getElementById('error-message').textContent = 'An error occurred during registration. Please try again.';
          document.getElementById('error-notification').classList.remove('hidden');
          
          // Auto-hide the notification after 5 seconds
          setTimeout(closeErrorNotification, 5000);
        });
      });
    }
  });
  
  // Helper function to update the UI to show the user is attending
  function updateAttendingUI() {
    // Update both the join form and attend form
    const joinForm = document.getElementById('join-form');
    if (joinForm) {
      const parentElement = joinForm.closest('.flex-1') || joinForm.parentElement;
      if (parentElement) {
        parentElement.innerHTML = '<div class="flex items-center"><i class="fas fa-check-circle text-green-500 mr-2"></i><p>You\'re already registered for this opportunity!</p></div>';
      }
    }
    
    const attendForm = document.getElementById('attend-form');
    if (attendForm) {
      attendForm.outerHTML = '<span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">You\'re attending</span>';
    }
  }
  
  function closeJoinPrompt() {
    const joinPrompt = document.getElementById('join-prompt');
    if (joinPrompt) {
      joinPrompt.classList.add('hidden');
    }
  }
  
  function closeSuccessNotification() {
    const successNotification = document.getElementById('success-notification');
    if (successNotification) {
      successNotification.classList.add('hidden');
    }
  }
  
  function closeErrorNotification() {
    const errorNotification = document.getElementById('error-notification');
    if (errorNotification) {
      errorNotification.classList.add('hidden');
    }
  }
</script> 